<?xml version="1.0" encoding="utf-8"?>
<!--
    RelaxVersioner - Easy-usage, Git-based, auto-generate version informations toolset.
    Copyright (c) Kouji Matsui (@kozy_kekyo, @kekyo@mastodon.cloud)
    
    Licensed under Apache-v2: https://opensource.org/licenses/Apache-2.0
-->
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- ============================================================================= -->
  <!-- Properties definition -->

  <!-- ======================== -->
  <!-- Common -->
    
  <PropertyGroup>
    <BuildIdentifier Condition="'$(BuildIdentifier)' == ''"></BuildIdentifier>
    <RelaxVersionerBuildIdentifier Condition="'$(RelaxVersionerBuildIdentifier)' == ''">$(BuildIdentifier)</RelaxVersionerBuildIdentifier>
    <RelaxVersionerGenerateStatic Condition="'$(RelaxVersionerGenerateStatic)' == ''">True</RelaxVersionerGenerateStatic>
    <GetPackageVersionDependsOn>
      RelaxVersionerBeforePack;
      $(GetPackageVersionDependsOn)
    </GetPackageVersionDependsOn>
  </PropertyGroup>

  <!-- ======================== -->
  <!-- Common (internal) -->
    
  <PropertyGroup Condition="('$(MSBuildRuntimeType)' == 'Core') AND ('$(MicrosoftNETBuildTasksTFM)' != '')">
    <_RVB_PlatformName>$(MicrosoftNETBuildTasksTFM)</_RVB_PlatformName>
  </PropertyGroup>
  <PropertyGroup Condition="('$(MSBuildRuntimeType)' == 'Core') AND ('$(MicrosoftNETBuildTasksTFM)' == '') AND ('$(BundledNETCoreAppTargetFrameworkVersion)' != '')">
    <_RVB_PlatformName Condition="$(BundledNETCoreAppTargetFrameworkVersion) &gt;= 5.0">net$(BundledNETCoreAppTargetFrameworkVersion)</_RVB_PlatformName>
    <_RVB_PlatformName Condition="$(BundledNETCoreAppTargetFrameworkVersion) &lt; 5.0">netcoreapp$(BundledNETCoreAppTargetFrameworkVersion)</_RVB_PlatformName>
  </PropertyGroup>
  <PropertyGroup Condition="('$(MSBuildRuntimeType)' == 'Core') AND ('$(MicrosoftNETBuildTasksTFM)' == '') AND ('$(BundledNETCoreAppTargetFrameworkVersion)' == '')">
    <_RVB_PlatformName>netcoreapp2.0</_RVB_PlatformName>
  </PropertyGroup>
  <PropertyGroup Condition="'$(MSBuildRuntimeType)' != 'Core'">
    <_RVB_PlatformName>net461</_RVB_PlatformName>
  </PropertyGroup>
    
  <PropertyGroup>
    <_RVB_ToolingDir>$([System.IO.Path]::Combine('$(_RVB_ScriptBaseDir)','..','tools','$(_RVB_PlatformName)'))</_RVB_ToolingDir>
    <_RVB_TemporaryBasePath Condition="'$(RelaxVersionerTemporaryBasePath)' == ''">$([System.IO.Path]::GetTempPath())</_RVB_TemporaryBasePath>
    <_RVB_TemporaryBasePath Condition="'$(RelaxVersionerTemporaryBasePath)' != ''">$([System.IO.Path]::GetFullPath('$(RelaxVersionerTemporaryBasePath)'))</_RVB_TemporaryBasePath>
  </PropertyGroup>
    
  <UsingTask
    TaskName="DumpPropertiesTask"
    AssemblyFile="$(_RVB_MSBuildTaskPath)" />
    
  <!-- ============================================================================= -->
  <!-- Build definition -->

  <Target Name="RelaxVersionerBeforeCompile" BeforeTargets="PrepareForBuild;BeforeCompile">
    <CallTarget Targets="RelaxVersionerPrepare;RelaxVersionerCoreGenerate" />
  </Target>

  <Target Name="RelaxVersionerPrepare">
    <!-- For F# -->
    <PropertyGroup Condition="'$(Language)' == 'F#'">
      <!-- HACK: https://github.com/fsharp/fsharp/issues/289 -->
      <NoWarn>$(NoWarn) 2003</NoWarn>
      <RelaxVersionerNamespace Condition="'$(RelaxVersionerNamespace)' == ''"></RelaxVersionerNamespace>
    </PropertyGroup>
  
    <!-- ======================== -->
    <!-- For C++ (or C++/CLI) -->
    <PropertyGroup Condition="'$(Language)' == 'C++'">
      <RelaxVersionerOutputPath Condition="'$(RelaxVersionerOutputPath)' == ''">$([System.IO.Path]::Combine('$(MSBuildProjectDirectory)','$(IntDir)','RelaxVersioner$(DefaultLanguageSourceExtension)'))</RelaxVersionerOutputPath>
      <RelaxVersionerLanguage Condition="('$(RelaxVersionerLanguage)' == '') AND ('$(CLRSupport)' == 'true')">C++/CLI</RelaxVersionerLanguage>
      <RelaxVersionerLanguage Condition="'$(RelaxVersionerLanguage)' == ''">C++</RelaxVersionerLanguage>
      <RelaxVersionerNamespace Condition="'$(RelaxVersionerNamespace)' == ''"></RelaxVersionerNamespace>
    </PropertyGroup>
  
    <!-- ======================== -->
    <!-- For all languages except C++ -->
    <PropertyGroup Condition="'$(Language)' != 'C++'">
      <RelaxVersionerOutputPath Condition="'$(RelaxVersionerOutputPath)' == ''">$([System.IO.Path]::Combine('$(MSBuildProjectDirectory)','$(IntermediateOutputPath)','RelaxVersioner$(DefaultLanguageSourceExtension)'))</RelaxVersionerOutputPath>
      <RelaxVersionerLanguage Condition="'$(RelaxVersionerLanguage)' == ''">$(Language)</RelaxVersionerLanguage>
    </PropertyGroup>
  
    <!-- ======================== -->
    <!-- For all languages except F# and C++ -->
    <PropertyGroup Condition="'$(Language)' != 'F#' AND '$(Language)' != 'C++'">
      <RelaxVersionerNamespace Condition="'$(RelaxVersionerNamespace)' == ''">$(RootNamespace)</RelaxVersionerNamespace>
    </PropertyGroup>

    <ItemGroup>
      <_RVB_OutputPath Include="$(RelaxVersionerOutputPath)" />
    </ItemGroup>
  </Target>
    
  <Target Name="RelaxVersionerCoreGenerate"
    Inputs="@(Compile);@(ClCompile)"
    Outputs="@(_RVB_OutputPath)">
    
    <PropertyGroup>
      <RelaxVersionerToolingRuntimeName Condition="'$(RelaxVersionerToolingRuntimeName)' == ''">$(_RVB_RuntimeName)</RelaxVersionerToolingRuntimeName>
      <RelaxVersionerToolingDir Condition="'$(RelaxVersionerToolingDir)' == ''">$([System.IO.Path]::GetFullPath('$(_RVB_ToolingDir)'))</RelaxVersionerToolingDir>
      <RelaxVersionerToolingPath Condition="'$(RelaxVersionerToolingPath)' == ''">$([System.IO.Path]::Combine('$(RelaxVersionerToolingDir)','$(_RVB_ExecutableName)'))</RelaxVersionerToolingPath>
    </PropertyGroup>

    <PropertyGroup>
      <_RVB_TargetFramework>$(TargetFramework)</_RVB_TargetFramework>
      <_RVB_TargetFrameworkIdentifier>$(TargetFrameworkIdentifier)</_RVB_TargetFrameworkIdentifier>
      <_RVB_TargetFrameworkVersion>$(TargetFrameworkVersion)</_RVB_TargetFrameworkVersion>
      <_RVB_TargetFrameworkProfile>$(TargetFrameworkProfile)</_RVB_TargetFrameworkProfile>
      <_RVB_PropertiesPath>$([System.IO.Path]::Combine('$(_RVB_TemporaryBasePath)','RelaxVersioner_Properties_$([System.Guid]::NewGuid().ToString())'))</_RVB_PropertiesPath>
      <_RVB_ResultPath>$([System.IO.Path]::Combine('$(_RVB_TemporaryBasePath)','RelaxVersioner_Result_$([System.Guid]::NewGuid().ToString())'))</_RVB_ResultPath>
    </PropertyGroup>
    
    <!-- ======================== -->
    <!-- Remove previous declaration before generating. -->

    <!-- For F# -->
    <ItemGroup Condition="'$(Language)' == 'F#'">
      <CompileBefore Remove="@(_RVB_OutputPath)" />
    </ItemGroup>

    <!-- For C++ (or C++/CLI) -->
    <ItemGroup Condition="'$(Language)' == 'C++'">
      <ClCompile Remove="@(_RVB_OutputPath)" />
    </ItemGroup>

    <!-- For other languages -->
    <ItemGroup Condition="('$(Language)' != 'F#') and ('$(Language)' != 'C++')">
      <Compile Remove="@(_RVB_OutputPath)" />
    </ItemGroup>

    <!-- ======================== -->
    <!-- Execute RelaxVersioner -->

    <DumpPropertiesTask OutputPath="$(_RVB_PropertiesPath)" />
    
    <Exec WorkingDirectory="$(RelaxVersionerToolingDir)"
          Command="$(RelaxVersionerToolingRuntimeName)&quot;$(RelaxVersionerToolingPath)&quot; --language=&quot;$(RelaxVersionerLanguage)&quot; --namespace=&quot;$(RelaxVersionerNamespace)&quot; --tfm=&quot;$(_RVB_TargetFramework)&quot; --tfid=&quot;$(_RVB_TargetFrameworkIdentifier)&quot; --tfv=&quot;$(_RVB_TargetFrameworkVersion)&quot; --tfp=&quot;$(_RVB_TargetFrameworkProfile)&quot; --genStatic=&quot;$(RelaxVersionerGenerateStatic)&quot; --buildIdentifier=&quot;$(RelaxVersionerBuildIdentifier)&quot; --propertiesPath=&quot;$(_RVB_PropertiesPath)&quot; --outputPath=@(_RVB_OutputPath->'&quot;%(FullPath)&quot;',' ') --resultPath=&quot;$(_RVB_ResultPath)&quot; &quot;$(MSBuildProjectFullPath)&quot;" />

    <XmlPeek XmlInputPath="$(_RVB_ResultPath)" Query="/Result/Version/text()">
      <Output TaskParameter="Result" PropertyName="_RVB_DetectedVersion" />
    </XmlPeek>
    <XmlPeek XmlInputPath="$(_RVB_ResultPath)" Query="/Result/ShortVersion/text()">
      <Output TaskParameter="Result" PropertyName="_RVB_DetectedShortVersion" />
    </XmlPeek>
    <XmlPeek XmlInputPath="$(_RVB_ResultPath)" Query="/Result/CommitId/text()">
      <Output TaskParameter="Result" PropertyName="_RVB_DetectedCommitId" />
    </XmlPeek>
    <XmlPeek XmlInputPath="$(_RVB_ResultPath)" Query="/Result/Branch/text()">
      <Output TaskParameter="Result" PropertyName="_RVB_DetectedBranch" />
    </XmlPeek>
    <XmlPeek XmlInputPath="$(_RVB_ResultPath)" Query="/Result/Message/text()">
      <Output TaskParameter="Result" PropertyName="_RVB_DetectedMessage" />
    </XmlPeek>

    <Delete Condition="'$(RelaxVersionerTemporaryBasePath)' == ''" Files="$(_RVB_ResultPath)" />
    <Delete Condition="'$(RelaxVersionerTemporaryBasePath)' == ''" Files="$(_RVB_PropertiesPath)" />

    <!-- ============================================================================= -->
    <!-- Add output rule -->

    <PropertyGroup>
      <!-- Apply NuGet versioning -->
      <PackageVersion>$(_RVB_DetectedShortVersion)</PackageVersion>
      <SourceRevisionId>$(_RVB_DetectedCommitId)</SourceRevisionId>   <!-- Sourcelink symbol, same as RepositoryCommit -->
      <RepositoryCommit>$(_RVB_DetectedCommitId)</RepositoryCommit>
      <RepositoryBranch>$(_RVB_DetectedBranch)</RepositoryBranch>
      <PackageReleaseNotes>$(_RVB_DetectedMessage)</PackageReleaseNotes>
    </PropertyGroup>

    <!-- ======================== -->
    <!-- For F# -->
      
    <ItemGroup Condition="'$(Language)' == 'F#'">
      <!-- HACK: F#'s EntryPoint expression is ignoring namespace/module if source code is last compilation.
            So, RelaxVersioner code insert before any source codes. -->
      <CompileBefore Include="@(_RVB_OutputPath)" />
      <FileWrites Include="@(_RVB_OutputPath)" />
    </ItemGroup>

    <!-- ======================== -->
    <!-- For C++ (or C++/CLI) -->
      
    <ItemGroup Condition="'$(Language)' == 'C++'">
      <ClCompile Include="@(_RVB_OutputPath)" />
      <FileWrites Include="@(_RVB_OutputPath)" />
    </ItemGroup>

    <!-- ======================== -->
    <!-- For other languages -->
      
    <ItemGroup Condition="('$(Language)' != 'F#') and ('$(Language)' != 'C++')">
      <Compile Include="@(_RVB_OutputPath)" />
      <FileWrites Include="@(_RVB_OutputPath)" />
    </ItemGroup>
  </Target>

  <!-- ============================================================================= -->
  <!-- Nuget packaging definition -->

  <Target Name="RelaxVersionerBeforePack" BeforeTargets="_GetProjectReferenceVersions">
    
    <PropertyGroup>
      <RelaxVersionerToolingRuntimeName Condition="'$(RelaxVersionerToolingRuntimeName)' == ''">$(_RVB_RuntimeName)</RelaxVersionerToolingRuntimeName>
      <RelaxVersionerToolingDir Condition="'$(RelaxVersionerToolingDir)' == ''">$([System.IO.Path]::GetFullPath('$(_RVB_ToolingDir)'))</RelaxVersionerToolingDir>
      <RelaxVersionerToolingPath Condition="'$(RelaxVersionerToolingPath)' == ''">$([System.IO.Path]::Combine('$(RelaxVersionerToolingDir)','$(_RVB_ExecutableName)'))</RelaxVersionerToolingPath>
    </PropertyGroup>

    <PropertyGroup>
      <_RVB_PackagePropertiesPath>$([System.IO.Path]::Combine('$(_RVB_TemporaryBasePath)','RelaxVersioner_Properties_$([System.Guid]::NewGuid().ToString())'))</_RVB_PackagePropertiesPath>
      <_RVB_PackageResultPath>$([System.IO.Path]::Combine('$([System.IO.Path]::GetTempPath())','RelaxVersioner_Result_$([System.Guid]::NewGuid().ToString())'))</_RVB_PackageResultPath>
    </PropertyGroup>

    <!-- ======================== -->
    <!-- Execute RelaxVersioner in dryrun mode -->

    <DumpPropertiesTask OutputPath="$(_RVB_PackagePropertiesPath)" />

    <Exec WorkingDirectory="$(RelaxVersionerToolingDir)"
          Command="$(RelaxVersionerToolingRuntimeName)&quot;$(RelaxVersionerToolingPath)&quot; --buildIdentifier=&quot;$(RelaxVersionerBuildIdentifier)&quot; --namespace=&quot;$(RelaxVersionerNamespace)&quot; --tfm=&quot;$(_RVB_TargetFramework)&quot; --tfid=&quot;$(_RVB_TargetFrameworkIdentifier)&quot; --tfv=&quot;$(_RVB_TargetFrameworkVersion)&quot; --tfp=&quot;$(_RVB_TargetFrameworkProfile)&quot; --genStatic=&quot;$(RelaxVersionerGenerateStatic)&quot; --propertiesPath=&quot;$(_RVB_PackagePropertiesPath)&quot; --resultPath=&quot;$(_RVB_PackageResultPath)&quot; &quot;$(MSBuildProjectFullPath)&quot;" />

    <XmlPeek XmlInputPath="$(_RVB_PackageResultPath)" Query="/Result/ShortVersion/text()">
      <Output TaskParameter="Result" PropertyName="_RVB_DetectedPackageVersion" />
    </XmlPeek>
    <XmlPeek XmlInputPath="$(_RVB_PackageResultPath)" Query="/Result/CommitId/text()">
      <Output TaskParameter="Result" PropertyName="_RVB_DetectedCommitId" />
    </XmlPeek>
    <XmlPeek XmlInputPath="$(_RVB_PackageResultPath)" Query="/Result/Branch/text()">
      <Output TaskParameter="Result" PropertyName="_RVB_DetectedBranch" />
    </XmlPeek>
    <XmlPeek XmlInputPath="$(_RVB_PackageResultPath)" Query="/Result/Message/text()">
      <Output TaskParameter="Result" PropertyName="_RVB_DetectedPackageMessage" />
    </XmlPeek>

    <Delete Condition="'$(RelaxVersionerTemporaryBasePath)' == ''" Files="$(_RVB_PackageResultPath)" />
    <Delete Condition="'$(RelaxVersionerTemporaryBasePath)' == ''" Files="$(_RVB_PackagePropertiesPath)" />

    <!-- ============================================================================= -->
    <!-- Add output rule -->

    <PropertyGroup>
      <!-- Apply NuGet versioning -->
      <PackageVersion>$(_RVB_DetectedPackageVersion)</PackageVersion>
      <SourceRevisionId>$(_RVB_DetectedCommitId)</SourceRevisionId>   <!-- Sourcelink symbol, same as RepositoryCommit -->
      <RepositoryCommit>$(_RVB_DetectedCommitId)</RepositoryCommit>
      <RepositoryBranch>$(_RVB_DetectedBranch)</RepositoryBranch>
      <PackageReleaseNotes>$(_RVB_DetectedPackageMessage)</PackageReleaseNotes>
    </PropertyGroup>
  </Target>

  <Target Name="SetNuSpecProperties" BeforeTargets="GenerateNuspec">
    <!-- Better referring ability in the nuspec declaration. -->
    <PropertyGroup>
      <NuspecProperties>$(NuspecProperties);Configuration=$(Configuration);PackageVersion=$(PackageVersion);RepositoryBranch=$(RepositoryBranch);RepositoryCommit=$(RepositoryCommit);PackageReleaseNotes=$(PackageReleaseNotes)</NuspecProperties>
    </PropertyGroup>
  </Target>

</Project>
